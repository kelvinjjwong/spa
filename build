#!/bin/bash
if [[ "$1" = "" ]] || [[ "$1" = "help" ]] || [[ "$1" = "--help" ]]  || [[ "$1" = "--?" ]]; then
   echo "Sample:"
   echo "$0"
   echo
   echo "$0 test"
   echo "$0 release"
   echo "$0 release major"
   echo "$0 release minor"
   echo "$0 release revision"
   echo
   exit 0
fi

IS_TEST=0
if [[ "$1" = "test" ]]; then
  IS_TEST=1
fi


if [[ "`which gh`" == "" ]]; then
    echo "GitHub CLI is required but has not properly installed."
    echo "https://cli.github.com"
    exit 1;
else
    gh --version
fi


GIT_USER="`grep 'user:' ~/.config/gh/hosts.yml | awk -F': ' '{print $NF}'`"
GIT_BASE_BRANCH="main"
GIT_REPOSITORY="${PWD##*/}"


gh repo view $GIT_REPOSITORY --json name,description,latestRelease,url,sshUrl,updatedAt
if [[ $? -ne 0 ]]; then
    gh repo create $GIT_REPOSITORY --public
    if [[ $? -ne 0 ]]; then
        echo "Unable to create repository in GitHub"
        exit 1
    fi
fi

if [[ ! -e README.md ]]; then
    echo "# ${GIT_REPOSITORY}" >> README.md
fi

if [[ ! -e LICENSE ]]; then
    curl -fsSL https://raw.githubusercontent.com/kelvinjjwong/spa/main/LICENSE > LICENSE
    sed -i '' -e "s/kelvinjjwong/${GIT_USER}/" LICENSE
    CURYEAR=`date '+%Y'`
    sed -i '' -e "s/2024/${CURYEAR}/" LICENSE
fi

if [[ ! -e .gitignore ]]; then
    curl -fsSL https://raw.githubusercontent.com/kelvinjjwong/spa/main/template/.gitignore > .gitignore
fi


git status
if [[ $? -ne 0 ]]; then
    git init
    git add -A
    git branch -M ${GIT_BASE_BRANCH}
    git remote add origin git@github.com:${GIT_USER}/${GIT_REPOSITORY}.git
    git commit -m "initial commit"
    git push -u origin ${GIT_BASE_BRANCH}
    if [[ $? -ne 0 ]]; then
        exit $?
    fi
fi


versionPos="revision"
versionChange=0
if [[ "$1" = "release" ]]; then
   versionChange=1
   if [[ "$2" = "major" ]]; then
       versionPos="major"
   elif [[ "$2" = "minor" ]]; then
       versionPos="minor"
   else
       versionPos="revision"
   fi
fi


# JUMP VERSION

PREV_VERSION=`grep "Version:" build_pod.sh | head -1 | awk -F':' '{print $NF}'`

if [[ $versionChange -ne 0 ]]; then
    if [[ $versionChange -eq 1 ]]; then
        if [[ "$versionPos" = "major" ]]; then
            NEW_VERSION=`echo $PREV_VERSION | awk -F'.' '{print $1+1".0.0"}'`
        elif [[ "$versionPos" = "minor" ]]; then
            NEW_VERSION=`echo $PREV_VERSION | awk -F'.' '{print $1"."$2+1".0"}'`
        else
            NEW_VERSION=`echo $PREV_VERSION | awk -F'.' '{print $1"."$2"."$3+1}'`
        fi
        
    else
        if [[ "$versionPos" = "major" ]]; then
            NEW_VERSION=`echo $PREV_VERSION | awk -F'.' '{print $1-1"."$2"."$3}'`
        elif [[ "$versionPos" = "minor" ]]; then
            NEW_VERSION=`echo $PREV_VERSION | awk -F'.' '{print $1"."$2-1"."$3}'`
        else
            NEW_VERSION=`echo $PREV_VERSION | awk -F'.' '{print $1"."$2"."$3-1}'`
        fi
    fi
    echo "Current version: $PREV_VERSION"
    echo "   Next version: $NEW_VERSION"
    sed -i '' -e 's/Version:'$PREV_VERSION'/Version:'$NEW_VERSION'/' *.sh
fi


# PUSH CHANGES BEFORE POD TESTING

GIT_BRANCH=`git status | grep "On branch" | head -1 | awk -F' ' '{print $NF}'`

CURRENT_VERSION=`grep "Version:" build_pod.sh | head -1 | awk -F':' '{print $NF}'`

GIT_REMOTE_REPO=`git config --get remote.origin.url`
if [ "$GIT_REMOTE_REPO" = "" ]; then
    git remote add origin git@github.com:${GIT_USER}/${GIT_REPOSITORY}.git
    git branch -M ${GIT_BASE_BRANCH}
    git push -u origin ${GIT_BASE_BRANCH}
fi

EXIST_TAG=`git ls-remote --tags origin | tr '/' ' ' | awk -F' ' '{print $NF}' | grep $CURRENT_VERSION`
if [[ "$EXIST_TAG" != "" ]]; then
    echo "$CURRENT_VERSION already exist in git repository. Aborted following build steps to avoid duplication."
    echo
    exit -1
fi

NEW_BRANCH=0
if [[ "$GIT_BRANCH" != "$CURRENT_VERSION" ]]; then
    NEW_BRANCH=1
    git branch $CURRENT_VERSION
    git checkout $CURRENT_VERSION
fi
git commit -am "build version $CURRENT_VERSION"
#if [[ $? -eq 0 ]]; then
    git push --set-upstream origin $CURRENT_VERSION
    if [[ $? -ne 0 ]]; then
       exit -1
    fi
#fi

if [[ $IS_TEST -ne 0 ]]; then
    echo
    echo "Test only, abort release procedure."
    echo
    echo "Clean new version branch $CURRENT_VERSION :"
    if [[ $NEW_BRANCH -ne 0 ]]; then
        git checkout $GIT_BRANCH
        git branch -d $CURRENT_VERSION
        git push origin -d $CURRENT_VERSION
    fi
    exit 0
fi


# RELEASE

GH=`which gh`
if [[ "$GH" != "" ]]; then
    gh pr status
    gh pr create --title "$CURRENT_VERSION" --body "**Full Changelog**: https://github.com/${GIT_USER}/${GIT_REPOSITORY}/compare/$PREV_VERSION...$CURRENT_VERSION"
    gh pr list
    GH_PR=`gh pr list | tail -1 | tr '#' ' ' | awk -F' ' '{print $1}'`
    gh pr merge $GH_PR -m
    if [[ $? -ne 0 ]]; then
        exit -1
    fi
    gh pr status
    git pull
    git checkout ${GIT_BASE_BRANCH}
    git pull
    gh release create $CURRENT_VERSION --generate-notes
    if [[ $? -ne 0 ]]; then
        exit -1
    fi
fi

